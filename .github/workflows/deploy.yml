name: Deploy Cloud Resume

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  deploy-infrastructure:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1

      - name: Terraform Init
        run: terraform init
        working-directory: ./terraform

      - name: Terraform Plan
        run: terraform plan
        working-directory: ./terraform

      - name: Terraform Apply
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        run: terraform apply -auto-approve
        working-directory: ./terraform

  deploy-backend:
    needs: deploy-infrastructure
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./backend
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.9'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install boto3
          pip install pytest

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Create Lambda deployment package
        run: |
          zip -j lambda_function.zip lambda_function.py

      - name: Update Lambda Function
        run: |
          aws lambda update-function-code \
            --function-name visitor-counter-function \
            --zip-file fileb://lambda_function.zip

      - name: Run tests
        env:
          PYTHONPATH: '${{ github.workspace }}/backend'
        run: |
          pytest tests/

  deploy-frontend:
    needs: deploy-backend
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./frontend
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Update API Gateway URL in JavaScript
        run: |
          API_URL=$(aws apigateway get-stage \
            --rest-api-id $(aws apigateway get-rest-apis | grep "name.*visitor-counter-api" -m 1 | awk -F '"' '{print $4}') \
            --stage-name dev \
            --query 'invokeUrl' \
            --output text)
          sed -i "s|<YOUR_API_GATEWAY_INVOKE_URL>|$API_URL|g" visitor-counter.js

      - name: Deploy to S3
        run: |
          aws s3 sync . s3://${{ secrets.S3_BUCKET }} --delete

      - name: Invalidate CloudFront Cache
        run: |
          aws cloudfront create-invalidation \
            --distribution-id ${{ secrets.CLOUDFRONT_DISTRIBUTION_ID }} \
            --paths "/*"
